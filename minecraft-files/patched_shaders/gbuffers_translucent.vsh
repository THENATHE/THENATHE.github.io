#version 150 core
#define varying out
#define attribute in
#define gl_Vertex vec4(Position, 1.0)
#define gl_ModelViewProjectionMatrix (gl_ProjectionMatrix * gl_ModelViewMatrix)
#define gl_ModelViewMatrix (iris_ModelViewMat * _iris_internal_translate(iris_ChunkOffset))
#define gl_NormalMatrix mat3(transpose(inverse(gl_ModelViewMatrix)))
#define gl_Normal Normal
#define gl_Color (Color * iris_ColorModulator)
#define gl_MultiTexCoord7  vec4(0.0, 0.0, 0.0, 1.0)
#define gl_MultiTexCoord6  vec4(0.0, 0.0, 0.0, 1.0)
#define gl_MultiTexCoord5  vec4(0.0, 0.0, 0.0, 1.0)
#define gl_MultiTexCoord4  vec4(0.0, 0.0, 0.0, 1.0)
#define gl_MultiTexCoord3  vec4(0.0, 0.0, 0.0, 1.0)
#define gl_MultiTexCoord2  vec4(0.0, 0.0, 0.0, 1.0)
#define gl_MultiTexCoord1 vec4(UV2, 0.0, 1.0)
#define gl_MultiTexCoord0 vec4(UV0, 0.0, 1.0)
#define gl_ProjectionMatrix iris_ProjMat
#define gl_FrontColor iris_FrontColor
#define gl_FogFragCoord iris_FogFragCoord
uniform mat4 iris_LightmapTextureMatrix;
uniform mat4 iris_TextureMat;
uniform float iris_FogDensity;
uniform float iris_FogStart;
uniform float iris_FogEnd;
uniform vec4 iris_FogColor;

struct iris_FogParameters {
    vec4 color;
    float density;
    float start;
    float end;
    float scale;
};

iris_FogParameters iris_Fog = iris_FogParameters(iris_FogColor, iris_FogDensity, iris_FogStart, iris_FogEnd, 1.0 / (iris_FogEnd - iris_FogStart));

#define gl_Fog iris_Fog
out float iris_FogFragCoord;
vec4 iris_FrontColor;
uniform mat4 iris_ProjMat;
in vec2 UV0;
in ivec2 UV2;
uniform vec4 iris_ColorModulator;
in vec4 Color;
in vec3 Normal;
uniform mat4 iris_ModelViewMat;
uniform vec3 iris_ChunkOffset;
mat4 _iris_internal_translate(vec3 offset) {
    // NB: Column-major order
    return mat4(1.0, 0.0, 0.0, 0.0,
                0.0, 1.0, 0.0, 0.0,
                0.0, 0.0, 1.0, 0.0,
                offset.x, offset.y, offset.z, 1.0);
}
in vec3 Position;
vec4 ftransform() { return gl_ModelViewProjectionMatrix * gl_Vertex; }
vec4 texture2D(sampler2D sampler, vec2 coord) { return texture(sampler, coord); }
vec4 texture2DLod(sampler2D sampler, vec2 coord, float lod) { return textureLod(sampler, coord, lod); }
vec4 shadow2D(sampler2DShadow sampler, vec3 coord) { return vec4(texture(sampler, coord)); }
vec4 shadow2DLod(sampler2DShadow sampler, vec3 coord, float lod) { return vec4(textureLod(sampler, coord, lod)); }
/* 
BSL Shaders v8 Series by Capt Tatsu 
https://bitslablab.com 
*/ 



















































































































































































































































































































































































































/* 
BSL Shaders v8 Series by Capt Tatsu 
https://bitslablab.com 
*/ 

//Settings//
/* 
BSL Shaders v8 Series by Capt Tatsu 
https://bitslablab.com 
*/ 

//Shader Options//

  

//Lighting//
  const int shadowMapResolution = 2048; //[512 1024 2048 3072 4096 8192]
  const float shadowDistance = 256.0; //[128.0 256.0 512.0 1024.0]
  
  
  const float sunPathRotation = -40.0; //[-60.0 -55.0 -50.0 -45.0 -40.0 -35.0 -30.0 -25.0 -20.0 -15.0 -10.0 -5.0 0.0 5.0 10.0 15.0 20.0 25.0 30.0 35.0 40.0 45.0 50.0 55.0 60.0]
  
  const float shadowMapBias = 1.0 - 25.6 / shadowDistance;
  
  
  
  
//#define DYNAMIC_HANDLIGHT
//#define TOON_LIGHTMAP
//#define WHITE_WORLD

//Material//
//#define ADVANCED_MATERIALS
  

  
  
  
  
  
//#define REFLECTION_PREVIOUS
//#define SPECULAR_HIGHLIGHT_ROUGH
//#define ALBEDO_METAL

  
  
  
  
  
  
  
//#define DIRECTIONAL_LIGHTMAP
  
  
  

  
  
  
  
  

//Atmospherics//
  
  
  
//#define AURORA
//#define ROUND_SUN_MOON
  
  
  
  
  
  
  
  

  
  
  
  
  
  
  
  
  
  

  
  
  
  
  
  

//Water//
  
  
  
  
  
  
  
  
  
  

//Post Effects//
//#define DOF
  
//#define MOTION_BLUR
  
  
  
  
  
  
  
  
//#define TAA
  
//#define DIRTY_LENS
  
//#define RETRO_FILTER
  

//Tonemap & Color Grading//
  
//#define AUTO_EXPOSURE

//#define COLOR_GRADING

  
  
  
  
  
  
  
  
  
  

  
  

  
  
  
  
  
  

  
  
  
  
  
  

  
  
  
  
  
  

  
  
  
  
  

//Color//
  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  
  
//#define SKY_VANILLA
//#define NETHER_VANILLA
//#define EMISSIVE_RECOLOR

//World//
  
//#define WORLD_CURVATURE
  
//#define WORLD_TIME_ANIMATION
  

//Waving//
  
  
  
  

//Undefine//
  
  
  
  
  
  

  
  
  
  

//Outline Params//
  
  
  

  
  
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  

//Retro Filter Removes AA//
  
  
  
  

//Normal Skip for 1.15 - 1.16 G7
  
  
  

//Fragment Shader///////////////////////////////////////////////////////////////////////////////////





















































































	



	
	



    
    
    

	

	
	
	
	
	
	
	
	
	
	
	
	
	
	

    



	
	
	
		
		
	
	



	

	
	
	

	
	
	

	
	
	
	

	
	
	
	

	
	

	
	






























	
	
		
		
	
	










	
	



	
	
	

























    
    
        
        
    
    




























    

    
    
    
    
    
    
    
    
    



    
    
    
    
    
    
    
    
    
    
    
    
    
                    

    








    
    













	
						  
						  
    
    
    



	



	
	



    

    
    

    
                          
    
    
    
    

    
    
                             

    
    
    
    
    
    
    
    
    

    
    
    
    
    

    
                   
    
    

    
    

    
        
        
        
    
    

    
    
    

    
    
    
    

    

    

    





	
	
	

    
    

	
    
    
    
                          
    
    
    

	

	
    

    
    

	
                   
    
    

	
	

    
        
        
        
    
    

	
    
    

    
    
    
    

    

	




	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
		
		
	
		
			
			

			
			
			
			
		
	
	
	

	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	

	



	
	
	



	
	



	
	
	



	
	
	






    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    

    



















    
    
    
    
    
    
    
    
    



    











	
	
	



    



    

    
    
    
        
                    
    
    

    



    

    
    
    
    
    
    
        
        
        
        
        
    
    

    
    
    
        
            
            
                         
            
            
            
        
        
    
    

    



    
    
               
    
    
    

    
    
    

    
                    

    
    
    

    

    
    
    
    
    
    
    
    
    
        
        
        
        
        
    
    
    
    
    
    

    

    
    
    
    
    

    




                 
                 
    
    
    

    
    
    

    
    
    
    
    
    
    
        
        
        
        
    
    
    
    
    
    
    
    
    

    
    
    

    
    
    
    
    
    

    

    
    
    
    
    
    
    
    

    
    
    
        
    
    
    
    
    
    
    

    
    
    

    
    
    
                        
                        

    
    

    
    
    

    
    
    

    
    

    
    

    
    

    
    

    
    

    
    


    



    



	



			  
	
	
	
	
	
	

	

    
    
	

    

    
        
		

		
        
		

        
		
			
			
			
			
		
        
        
		
    

	

	
	
	
	
	
	

	
	
	
	
	

	


    
	

    
	
	
	
		
		
		
		
	
	
    



    
    
    
    
        

    
    
    

    
    
    
    
    
    
    
                   
    
    
    
    
    
    
    
    
    
    
    



    
    
    



    
    
    
    

	



    
    



    
    
    
    

    
    
    
    

    
    
    
    
    
    
    
    
    
    

    
    

    
    
    

    



                          
    
    
    
    

    

    
    
    
    
    
                        
    
    
    




	
	

	
	
	
	
	

	
	

	



	
	
	

	
	
	

	
	
	
	
	
	
	

	
		
		
	

	

	
		
		
			
			
			

			

			
			
			
			
			

			
			

			
		
		
		
		
			
			
			
		
		
		
	
	
	
	
	



	



	
	
	
	
	
	
	
	
	
	
	
		
		
		
	
	

	
		
	









	
		  

	

	



	
	
	
	
	
	

	

	

	
	
	

	
		
		
	

	

	
		
		
			

			
			

			
			
			
				
				
				
				

				
				
			
			
		
	
	

	









							
							
							
							
							
							
							
							
						
							   

	
	





    
    
    
    
    
    
    
    
    



    
    
    
    
    
    
    
    
    



    
    
    
    

    
    
    

    
    
    
     
    
    
    
    
    
    

    


    
    

    



    

    
    
        
        
        
    
    
    
    
        
    
        

	


                  
                  
    

    
    
    
    
    

    
    

	
    
    

    
    

    
    
    
    
    
    
    
    
    

    
    

	
    
        
        
        
    
        
        
    
    

    
    
    
    
    

    
    
    
    
    
    
    
    


    
	



    

    
    

    
    

    
    
    

    

    
        
        
        
        
    

    
    

    



                        
    
    

    
    

    
    
    
    

    
                     

    
    

    

    
    
    
        
        
                             
        
        
        
        
    
    
    
    

    




	

    
    
    
    
		  
		  
	



	



    



	
    
    
    
    
	
	
	

    
    
    
    
    
    
    
    

    

	



    
    

	
	
    
    
    
    
    
    
    
    

	
	

    






    
	
	
	
	
	
	
	
	
	
	
	
		
		
	
	
	

	

	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		

		

		
		
		
							  
							  

		
		
			
			
		
		

		
		
		
						
		
			
				
		
		
		
		
		
		
		
		

		
		
		
		

    	

		
		
		
		
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		

		
		
		

		
		
		
			  

		
		
		
		

		
		
		
		
		
		
			
											   
		
		

		
		
		
		
		
		
		
		
		
				    

		
		
		
		
			
		
		
		
		
		
		
		
		

		
		
		
		
		

		

		
			
							  
							  

			
			
				
			
		
		
		
		
		

		
			
			
			
	
			
			
			
			
			
			
			
			
			
				
				

				
				
				

				
				
				

				
				
				

				
				
													 
				
				
				
				
				

				
				

				
				
				
				

				
				
				
				

				
				

				
			
			
			
			
			
			
			
		
			
			

			

			
			
			
			
				
				
				
				
				
			
			
			
			
			

			
				
				
				
				
				
				
				

				
					
					
					
					
					
					
					
					
					
					
					
					

					
						
						
						
					
					

					
					
					

					
					
					
				

				

				
							 
				
			
			
			

			
			

			
										   	   
			
		

		

		
		
		
		
		
		
		
		

		
		
		
		

		
		
		
	

    
    
	




//Vertex Shader/////////////////////////////////////////////////////////////////////////////////////


//Varyings//
varying float mat;
varying float dist;

varying vec2 texCoord, lmCoord;

varying vec3 normal, binormal, tangent;
varying vec3 sunVec, upVec, eastVec;
varying vec3 viewVector;

varying vec4 color;





//Uniforms//
uniform int worldTime;

uniform float frameTimeCounter;
uniform float timeAngle;

uniform vec3 cameraPosition;

uniform mat4 gbufferModelView, gbufferModelViewInverse;







//Attributes//
attribute vec4 mc_Entity;
attribute vec4 mc_midTexCoord;
attribute vec4 at_tangent;

//Common Variables//



float frametime = frameTimeCounter * 1.00;


//Common Functions//
float WavingWater(vec3 worldPos) {
	float fractY = fract(worldPos.y + cameraPosition.y + 0.005);
		
	float wave = sin(6.28 * (frametime * 0.7 + worldPos.x * 0.14 + worldPos.z * 0.07)) +
				 sin(6.28 * (frametime * 0.5 + worldPos.x * 0.10 + worldPos.z * 0.20));
	if (fractY > 0.01) return wave * 0.0125;
	
	return 0.0;
}

//Includes//





							
							
							
							
							
							
							
							
						
							   

	
	





    



//Program//
void main() {
	texCoord = (iris_TextureMat * gl_MultiTexCoord0).xy;
    
	lmCoord = (iris_LightmapTextureMatrix * gl_MultiTexCoord1).xy;
	lmCoord = clamp((lmCoord - 0.03125) * 1.06667, vec2(0.0), vec2(0.9333, 1.0));

	normal   = normalize(gl_NormalMatrix * gl_Normal);
	binormal = normalize(gl_NormalMatrix * cross(at_tangent.xyz, gl_Normal.xyz) * at_tangent.w);
	tangent  = normalize(gl_NormalMatrix * at_tangent.xyz);
	
	mat3 tbnMatrix = mat3(tangent.x, binormal.x, normal.x,
						  tangent.y, binormal.y, normal.y,
						  tangent.z, binormal.z, normal.z);
								  
	viewVector = tbnMatrix * (gl_ModelViewMatrix * gl_Vertex).xyz;
	
	dist = length(gl_ModelViewMatrix * gl_Vertex);

	
	
	

	
	
	
	
	
    
	color = gl_Color;
	
	mat = 0.0;
	
	if (mc_Entity.x == 10300 || mc_Entity.x == 10303) mat = 1.0;
	if (mc_Entity.x == 10301 || mc_Entity.x == 10304) mat = 2.0;
	if (mc_Entity.x == 10302) 						  mat = 3.0;
	if (mc_Entity.x == 10303 || mc_Entity.x == 10304) color.a = 1.0;

	const vec2 sunRotationData = vec2(
		 cos(sunPathRotation * 0.01745329251994),
		-sin(sunPathRotation * 0.01745329251994)
	);
	float ang = fract(timeAngle - 0.25);
	ang = (ang + (cos(ang * 3.14159265358979) * -0.5 + 0.5 - ang) / 3.0) * 6.28318530717959;
	sunVec = normalize((gbufferModelView * vec4(vec3(-sin(ang), cos(ang) * sunRotationData) * 2000.0, 1.0)).xyz);

	upVec = normalize(gbufferModelView[1].xyz);
	eastVec = normalize(gbufferModelView[0].xyz);

	vec4 position = gbufferModelViewInverse * gl_ModelViewMatrix * gl_Vertex;
	
	
	float istopv = gl_MultiTexCoord0.t < mc_midTexCoord.t ? 1.0 : 0.0;
	if (mc_Entity.x == 10300 || mc_Entity.x == 10302) position.y += WavingWater(position.xyz);
	

    
	
    

	gl_Position = gl_ProjectionMatrix * gbufferModelView * position;
	if (mat == 0.0) gl_Position.z -= 0.00001;
	
	
	
	
}




